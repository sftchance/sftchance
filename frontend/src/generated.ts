// Generated by @wagmi/cli@1.0.0 on 5/21/2023 at 10:15:15 PM
import {
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  Address,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Orb
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x4B2c68B20AA9D1EDb35826E380B018c1702b1213)
 */
export const orbABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      {
        name: '$renderer',
        internalType: 'contract IOrbRenderer',
        type: 'address',
      },
    ],
  },
  { type: 'error', inputs: [], name: 'AccountBalanceOverflow' },
  { type: 'error', inputs: [], name: 'ArrayLengthsMismatch' },
  { type: 'error', inputs: [], name: 'InsufficientBalance' },
  { type: 'error', inputs: [], name: 'NotOwnerNorApproved' },
  {
    type: 'error',
    inputs: [],
    name: 'TransferToNonERC1155ReceiverImplementer',
  },
  { type: 'error', inputs: [], name: 'TransferToZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'isApproved',
        internalType: 'bool',
        type: 'bool',
        indexed: false,
      },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '$by', internalType: 'address', type: 'address', indexed: true },
      { name: '$id', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Forfeit',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '$by', internalType: 'address', type: 'address', indexed: true },
      { name: '$id', internalType: 'uint256', type: 'uint256', indexed: true },
      {
        name: '$forkId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Fork',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '$by', internalType: 'address', type: 'address', indexed: true },
      { name: '$id', internalType: 'uint256', type: 'uint256', indexed: true },
      {
        name: '$maxSupply',
        internalType: 'uint8',
        type: 'uint8',
        indexed: false,
      },
      {
        name: '$price',
        internalType: 'uint24',
        type: 'uint24',
        indexed: false,
      },
      {
        name: '$closure',
        internalType: 'uint32',
        type: 'uint32',
        indexed: false,
      },
      {
        name: '$vault',
        internalType: 'address payable',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Load',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'ids',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
      {
        name: 'amounts',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'TransferBatch',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: false },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'TransferSingle',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'value', internalType: 'string', type: 'string', indexed: false },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'URI',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'balanceOf',
    outputs: [{ name: 'result', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owners', internalType: 'address[]', type: 'address[]' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'balanceOfBatch',
    outputs: [
      { name: 'balances', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '$id', internalType: 'uint256', type: 'uint256' },
      { name: '$amount', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'deployer',
    outputs: [{ name: '', internalType: 'address payable', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '$id', internalType: 'uint256', type: 'uint256' }],
    name: 'forfeit',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: '$forkedId', internalType: 'uint256', type: 'uint256' },
      { name: '$id', internalType: 'uint256', type: 'uint256' },
      {
        name: '$provenance',
        internalType: 'struct IOrb.Provenance',
        type: 'tuple',
        components: [
          { name: 'maxSupply', internalType: 'uint8', type: 'uint8' },
          { name: 'price', internalType: 'uint24', type: 'uint24' },
          { name: 'totalSupply', internalType: 'uint32', type: 'uint32' },
          { name: 'closure', internalType: 'uint32', type: 'uint32' },
          { name: 'vault', internalType: 'address payable', type: 'address' },
        ],
      },
    ],
    name: 'fork',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: 'result', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '$id', internalType: 'uint256', type: 'uint256' }],
    name: 'isValid',
    outputs: [{ name: '$valid', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: '$id', internalType: 'uint256', type: 'uint256' },
      {
        name: '$provenance',
        internalType: 'struct IOrb.Provenance',
        type: 'tuple',
        components: [
          { name: 'maxSupply', internalType: 'uint8', type: 'uint8' },
          { name: 'price', internalType: 'uint24', type: 'uint24' },
          { name: 'totalSupply', internalType: 'uint32', type: 'uint32' },
          { name: 'closure', internalType: 'uint32', type: 'uint32' },
          { name: 'vault', internalType: 'address payable', type: 'address' },
        ],
      },
    ],
    name: 'load',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: '$to', internalType: 'address', type: 'address' },
      { name: '$id', internalType: 'uint256', type: 'uint256' },
      { name: '$amount', internalType: 'uint32', type: 'uint32' },
      { name: '$data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'provenance',
    outputs: [
      { name: 'maxSupply', internalType: 'uint8', type: 'uint8' },
      { name: 'price', internalType: 'uint24', type: 'uint24' },
      { name: 'totalSupply', internalType: 'uint32', type: 'uint32' },
      { name: 'closure', internalType: 'uint32', type: 'uint32' },
      { name: 'vault', internalType: 'address payable', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'renderer',
    outputs: [
      { name: '', internalType: 'contract IOrbRenderer', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'amounts', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeBatchTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'isApproved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: 'result', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '$id', internalType: 'uint256', type: 'uint256' }],
    name: 'uri',
    outputs: [{ name: '$uri', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'withdraw',
    outputs: [],
  },
] as const

/**
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x4B2c68B20AA9D1EDb35826E380B018c1702b1213)
 */
export const orbAddress = {
  5: '0x4B2c68B20AA9D1EDb35826E380B018c1702b1213',
} as const

/**
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x4B2c68B20AA9D1EDb35826E380B018c1702b1213)
 */
export const orbConfig = { address: orbAddress, abi: orbABI } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// OrbRenderer
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xB467D6619e6895Df95A56e2164C7596Cd09B1E70)
 */
export const orbRendererABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '$ifpsHashBytes', internalType: 'bytes', type: 'bytes' },
      { name: '$layers', internalType: 'string[]', type: 'string[]' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'MAX_STOPS',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: '$id', internalType: 'uint256', type: 'uint256' },
      { name: '$config', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'attributes',
    outputs: [{ name: '$attributes', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ipfsHashBytes',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'layers',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '$id', internalType: 'uint256', type: 'uint256' },
      { name: '$config', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'svg',
    outputs: [{ name: '$svg', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '$id', internalType: 'uint256', type: 'uint256' }],
    name: 'uri',
    outputs: [{ name: 'metadata', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '$id', internalType: 'uint256', type: 'uint256' }],
    name: 'uriIPFS',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
] as const

/**
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xB467D6619e6895Df95A56e2164C7596Cd09B1E70)
 */
export const orbRendererAddress = {
  5: '0xB467D6619e6895Df95A56e2164C7596Cd09B1E70',
} as const

/**
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xB467D6619e6895Df95A56e2164C7596Cd09B1E70)
 */
export const orbRendererConfig = {
  address: orbRendererAddress,
  abi: orbRendererABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link orbABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x4B2c68B20AA9D1EDb35826E380B018c1702b1213)
 */
export function useOrbRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof orbABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof orbABI, TFunctionName, TSelectData>,
    'abi' | 'address'
  > & { chainId?: keyof typeof orbAddress } = {} as any,
) {
  return useContractRead({
    abi: orbABI,
    address: orbAddress[5],
    ...config,
  } as UseContractReadConfig<typeof orbABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link orbABI}__ and `functionName` set to `"balanceOf"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x4B2c68B20AA9D1EDb35826E380B018c1702b1213)
 */
export function useOrbBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof orbABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof orbABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof orbAddress } = {} as any,
) {
  return useContractRead({
    abi: orbABI,
    address: orbAddress[5],
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof orbABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link orbABI}__ and `functionName` set to `"balanceOfBatch"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x4B2c68B20AA9D1EDb35826E380B018c1702b1213)
 */
export function useOrbBalanceOfBatch<
  TFunctionName extends 'balanceOfBatch',
  TSelectData = ReadContractResult<typeof orbABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof orbABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof orbAddress } = {} as any,
) {
  return useContractRead({
    abi: orbABI,
    address: orbAddress[5],
    functionName: 'balanceOfBatch',
    ...config,
  } as UseContractReadConfig<typeof orbABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link orbABI}__ and `functionName` set to `"deployer"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x4B2c68B20AA9D1EDb35826E380B018c1702b1213)
 */
export function useOrbDeployer<
  TFunctionName extends 'deployer',
  TSelectData = ReadContractResult<typeof orbABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof orbABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof orbAddress } = {} as any,
) {
  return useContractRead({
    abi: orbABI,
    address: orbAddress[5],
    functionName: 'deployer',
    ...config,
  } as UseContractReadConfig<typeof orbABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link orbABI}__ and `functionName` set to `"isApprovedForAll"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x4B2c68B20AA9D1EDb35826E380B018c1702b1213)
 */
export function useOrbIsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<typeof orbABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof orbABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof orbAddress } = {} as any,
) {
  return useContractRead({
    abi: orbABI,
    address: orbAddress[5],
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof orbABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link orbABI}__ and `functionName` set to `"isValid"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x4B2c68B20AA9D1EDb35826E380B018c1702b1213)
 */
export function useOrbIsValid<
  TFunctionName extends 'isValid',
  TSelectData = ReadContractResult<typeof orbABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof orbABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof orbAddress } = {} as any,
) {
  return useContractRead({
    abi: orbABI,
    address: orbAddress[5],
    functionName: 'isValid',
    ...config,
  } as UseContractReadConfig<typeof orbABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link orbABI}__ and `functionName` set to `"provenance"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x4B2c68B20AA9D1EDb35826E380B018c1702b1213)
 */
export function useOrbProvenance<
  TFunctionName extends 'provenance',
  TSelectData = ReadContractResult<typeof orbABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof orbABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof orbAddress } = {} as any,
) {
  return useContractRead({
    abi: orbABI,
    address: orbAddress[5],
    functionName: 'provenance',
    ...config,
  } as UseContractReadConfig<typeof orbABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link orbABI}__ and `functionName` set to `"renderer"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x4B2c68B20AA9D1EDb35826E380B018c1702b1213)
 */
export function useOrbRenderer<
  TFunctionName extends 'renderer',
  TSelectData = ReadContractResult<typeof orbABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof orbABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof orbAddress } = {} as any,
) {
  return useContractRead({
    abi: orbABI,
    address: orbAddress[5],
    functionName: 'renderer',
    ...config,
  } as UseContractReadConfig<typeof orbABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link orbABI}__ and `functionName` set to `"supportsInterface"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x4B2c68B20AA9D1EDb35826E380B018c1702b1213)
 */
export function useOrbSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof orbABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof orbABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof orbAddress } = {} as any,
) {
  return useContractRead({
    abi: orbABI,
    address: orbAddress[5],
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof orbABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link orbABI}__ and `functionName` set to `"uri"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x4B2c68B20AA9D1EDb35826E380B018c1702b1213)
 */
export function useOrbUri<
  TFunctionName extends 'uri',
  TSelectData = ReadContractResult<typeof orbABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof orbABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof orbAddress } = {} as any,
) {
  return useContractRead({
    abi: orbABI,
    address: orbAddress[5],
    functionName: 'uri',
    ...config,
  } as UseContractReadConfig<typeof orbABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link orbABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x4B2c68B20AA9D1EDb35826E380B018c1702b1213)
 */
export function useOrbWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof orbAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof orbABI, string>['request']['abi'],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<typeof orbABI, TFunctionName, TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  return useContractWrite<typeof orbABI, TFunctionName, TMode>({
    abi: orbABI,
    address: orbAddress[5],
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link orbABI}__ and `functionName` set to `"burn"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x4B2c68B20AA9D1EDb35826E380B018c1702b1213)
 */
export function useOrbBurn<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof orbAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof orbABI, 'burn'>['request']['abi'],
        'burn',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'burn' }
    : UseContractWriteConfig<typeof orbABI, 'burn', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'burn'
      } = {} as any,
) {
  return useContractWrite<typeof orbABI, 'burn', TMode>({
    abi: orbABI,
    address: orbAddress[5],
    functionName: 'burn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link orbABI}__ and `functionName` set to `"forfeit"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x4B2c68B20AA9D1EDb35826E380B018c1702b1213)
 */
export function useOrbForfeit<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof orbAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof orbABI, 'forfeit'>['request']['abi'],
        'forfeit',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'forfeit' }
    : UseContractWriteConfig<typeof orbABI, 'forfeit', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'forfeit'
      } = {} as any,
) {
  return useContractWrite<typeof orbABI, 'forfeit', TMode>({
    abi: orbABI,
    address: orbAddress[5],
    functionName: 'forfeit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link orbABI}__ and `functionName` set to `"fork"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x4B2c68B20AA9D1EDb35826E380B018c1702b1213)
 */
export function useOrbFork<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof orbAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof orbABI, 'fork'>['request']['abi'],
        'fork',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'fork' }
    : UseContractWriteConfig<typeof orbABI, 'fork', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'fork'
      } = {} as any,
) {
  return useContractWrite<typeof orbABI, 'fork', TMode>({
    abi: orbABI,
    address: orbAddress[5],
    functionName: 'fork',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link orbABI}__ and `functionName` set to `"load"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x4B2c68B20AA9D1EDb35826E380B018c1702b1213)
 */
export function useOrbLoad<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof orbAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof orbABI, 'load'>['request']['abi'],
        'load',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'load' }
    : UseContractWriteConfig<typeof orbABI, 'load', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'load'
      } = {} as any,
) {
  return useContractWrite<typeof orbABI, 'load', TMode>({
    abi: orbABI,
    address: orbAddress[5],
    functionName: 'load',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link orbABI}__ and `functionName` set to `"mint"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x4B2c68B20AA9D1EDb35826E380B018c1702b1213)
 */
export function useOrbMint<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof orbAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof orbABI, 'mint'>['request']['abi'],
        'mint',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'mint' }
    : UseContractWriteConfig<typeof orbABI, 'mint', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'mint'
      } = {} as any,
) {
  return useContractWrite<typeof orbABI, 'mint', TMode>({
    abi: orbABI,
    address: orbAddress[5],
    functionName: 'mint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link orbABI}__ and `functionName` set to `"safeBatchTransferFrom"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x4B2c68B20AA9D1EDb35826E380B018c1702b1213)
 */
export function useOrbSafeBatchTransferFrom<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof orbAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof orbABI,
          'safeBatchTransferFrom'
        >['request']['abi'],
        'safeBatchTransferFrom',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'safeBatchTransferFrom'
      }
    : UseContractWriteConfig<typeof orbABI, 'safeBatchTransferFrom', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'safeBatchTransferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof orbABI, 'safeBatchTransferFrom', TMode>({
    abi: orbABI,
    address: orbAddress[5],
    functionName: 'safeBatchTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link orbABI}__ and `functionName` set to `"safeTransferFrom"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x4B2c68B20AA9D1EDb35826E380B018c1702b1213)
 */
export function useOrbSafeTransferFrom<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof orbAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof orbABI,
          'safeTransferFrom'
        >['request']['abi'],
        'safeTransferFrom',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'safeTransferFrom'
      }
    : UseContractWriteConfig<typeof orbABI, 'safeTransferFrom', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof orbABI, 'safeTransferFrom', TMode>({
    abi: orbABI,
    address: orbAddress[5],
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link orbABI}__ and `functionName` set to `"setApprovalForAll"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x4B2c68B20AA9D1EDb35826E380B018c1702b1213)
 */
export function useOrbSetApprovalForAll<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof orbAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof orbABI,
          'setApprovalForAll'
        >['request']['abi'],
        'setApprovalForAll',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'setApprovalForAll'
      }
    : UseContractWriteConfig<typeof orbABI, 'setApprovalForAll', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<typeof orbABI, 'setApprovalForAll', TMode>({
    abi: orbABI,
    address: orbAddress[5],
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link orbABI}__ and `functionName` set to `"withdraw"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x4B2c68B20AA9D1EDb35826E380B018c1702b1213)
 */
export function useOrbWithdraw<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof orbAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof orbABI, 'withdraw'>['request']['abi'],
        'withdraw',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'withdraw' }
    : UseContractWriteConfig<typeof orbABI, 'withdraw', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'withdraw'
      } = {} as any,
) {
  return useContractWrite<typeof orbABI, 'withdraw', TMode>({
    abi: orbABI,
    address: orbAddress[5],
    functionName: 'withdraw',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link orbABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x4B2c68B20AA9D1EDb35826E380B018c1702b1213)
 */
export function usePrepareOrbWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof orbABI, TFunctionName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof orbAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: orbABI,
    address: orbAddress[5],
    ...config,
  } as UsePrepareContractWriteConfig<typeof orbABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link orbABI}__ and `functionName` set to `"burn"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x4B2c68B20AA9D1EDb35826E380B018c1702b1213)
 */
export function usePrepareOrbBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof orbABI, 'burn'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof orbAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: orbABI,
    address: orbAddress[5],
    functionName: 'burn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof orbABI, 'burn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link orbABI}__ and `functionName` set to `"forfeit"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x4B2c68B20AA9D1EDb35826E380B018c1702b1213)
 */
export function usePrepareOrbForfeit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof orbABI, 'forfeit'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof orbAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: orbABI,
    address: orbAddress[5],
    functionName: 'forfeit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof orbABI, 'forfeit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link orbABI}__ and `functionName` set to `"fork"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x4B2c68B20AA9D1EDb35826E380B018c1702b1213)
 */
export function usePrepareOrbFork(
  config: Omit<
    UsePrepareContractWriteConfig<typeof orbABI, 'fork'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof orbAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: orbABI,
    address: orbAddress[5],
    functionName: 'fork',
    ...config,
  } as UsePrepareContractWriteConfig<typeof orbABI, 'fork'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link orbABI}__ and `functionName` set to `"load"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x4B2c68B20AA9D1EDb35826E380B018c1702b1213)
 */
export function usePrepareOrbLoad(
  config: Omit<
    UsePrepareContractWriteConfig<typeof orbABI, 'load'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof orbAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: orbABI,
    address: orbAddress[5],
    functionName: 'load',
    ...config,
  } as UsePrepareContractWriteConfig<typeof orbABI, 'load'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link orbABI}__ and `functionName` set to `"mint"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x4B2c68B20AA9D1EDb35826E380B018c1702b1213)
 */
export function usePrepareOrbMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof orbABI, 'mint'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof orbAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: orbABI,
    address: orbAddress[5],
    functionName: 'mint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof orbABI, 'mint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link orbABI}__ and `functionName` set to `"safeBatchTransferFrom"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x4B2c68B20AA9D1EDb35826E380B018c1702b1213)
 */
export function usePrepareOrbSafeBatchTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof orbABI, 'safeBatchTransferFrom'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof orbAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: orbABI,
    address: orbAddress[5],
    functionName: 'safeBatchTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof orbABI, 'safeBatchTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link orbABI}__ and `functionName` set to `"safeTransferFrom"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x4B2c68B20AA9D1EDb35826E380B018c1702b1213)
 */
export function usePrepareOrbSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof orbABI, 'safeTransferFrom'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof orbAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: orbABI,
    address: orbAddress[5],
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof orbABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link orbABI}__ and `functionName` set to `"setApprovalForAll"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x4B2c68B20AA9D1EDb35826E380B018c1702b1213)
 */
export function usePrepareOrbSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof orbABI, 'setApprovalForAll'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof orbAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: orbABI,
    address: orbAddress[5],
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof orbABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link orbABI}__ and `functionName` set to `"withdraw"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x4B2c68B20AA9D1EDb35826E380B018c1702b1213)
 */
export function usePrepareOrbWithdraw(
  config: Omit<
    UsePrepareContractWriteConfig<typeof orbABI, 'withdraw'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof orbAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: orbABI,
    address: orbAddress[5],
    functionName: 'withdraw',
    ...config,
  } as UsePrepareContractWriteConfig<typeof orbABI, 'withdraw'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link orbABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x4B2c68B20AA9D1EDb35826E380B018c1702b1213)
 */
export function useOrbEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof orbABI, TEventName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof orbAddress } = {} as any,
) {
  return useContractEvent({
    abi: orbABI,
    address: orbAddress[5],
    ...config,
  } as UseContractEventConfig<typeof orbABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link orbABI}__ and `eventName` set to `"ApprovalForAll"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x4B2c68B20AA9D1EDb35826E380B018c1702b1213)
 */
export function useOrbApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof orbABI, 'ApprovalForAll'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof orbAddress } = {} as any,
) {
  return useContractEvent({
    abi: orbABI,
    address: orbAddress[5],
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof orbABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link orbABI}__ and `eventName` set to `"Forfeit"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x4B2c68B20AA9D1EDb35826E380B018c1702b1213)
 */
export function useOrbForfeitEvent(
  config: Omit<
    UseContractEventConfig<typeof orbABI, 'Forfeit'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof orbAddress } = {} as any,
) {
  return useContractEvent({
    abi: orbABI,
    address: orbAddress[5],
    eventName: 'Forfeit',
    ...config,
  } as UseContractEventConfig<typeof orbABI, 'Forfeit'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link orbABI}__ and `eventName` set to `"Fork"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x4B2c68B20AA9D1EDb35826E380B018c1702b1213)
 */
export function useOrbForkEvent(
  config: Omit<
    UseContractEventConfig<typeof orbABI, 'Fork'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof orbAddress } = {} as any,
) {
  return useContractEvent({
    abi: orbABI,
    address: orbAddress[5],
    eventName: 'Fork',
    ...config,
  } as UseContractEventConfig<typeof orbABI, 'Fork'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link orbABI}__ and `eventName` set to `"Load"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x4B2c68B20AA9D1EDb35826E380B018c1702b1213)
 */
export function useOrbLoadEvent(
  config: Omit<
    UseContractEventConfig<typeof orbABI, 'Load'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof orbAddress } = {} as any,
) {
  return useContractEvent({
    abi: orbABI,
    address: orbAddress[5],
    eventName: 'Load',
    ...config,
  } as UseContractEventConfig<typeof orbABI, 'Load'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link orbABI}__ and `eventName` set to `"TransferBatch"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x4B2c68B20AA9D1EDb35826E380B018c1702b1213)
 */
export function useOrbTransferBatchEvent(
  config: Omit<
    UseContractEventConfig<typeof orbABI, 'TransferBatch'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof orbAddress } = {} as any,
) {
  return useContractEvent({
    abi: orbABI,
    address: orbAddress[5],
    eventName: 'TransferBatch',
    ...config,
  } as UseContractEventConfig<typeof orbABI, 'TransferBatch'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link orbABI}__ and `eventName` set to `"TransferSingle"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x4B2c68B20AA9D1EDb35826E380B018c1702b1213)
 */
export function useOrbTransferSingleEvent(
  config: Omit<
    UseContractEventConfig<typeof orbABI, 'TransferSingle'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof orbAddress } = {} as any,
) {
  return useContractEvent({
    abi: orbABI,
    address: orbAddress[5],
    eventName: 'TransferSingle',
    ...config,
  } as UseContractEventConfig<typeof orbABI, 'TransferSingle'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link orbABI}__ and `eventName` set to `"URI"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x4B2c68B20AA9D1EDb35826E380B018c1702b1213)
 */
export function useOrbUriEvent(
  config: Omit<
    UseContractEventConfig<typeof orbABI, 'URI'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof orbAddress } = {} as any,
) {
  return useContractEvent({
    abi: orbABI,
    address: orbAddress[5],
    eventName: 'URI',
    ...config,
  } as UseContractEventConfig<typeof orbABI, 'URI'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link orbRendererABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xB467D6619e6895Df95A56e2164C7596Cd09B1E70)
 */
export function useOrbRendererRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof orbRendererABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof orbRendererABI, TFunctionName, TSelectData>,
    'abi' | 'address'
  > & { chainId?: keyof typeof orbRendererAddress } = {} as any,
) {
  return useContractRead({
    abi: orbRendererABI,
    address: orbRendererAddress[5],
    ...config,
  } as UseContractReadConfig<typeof orbRendererABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link orbRendererABI}__ and `functionName` set to `"MAX_STOPS"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xB467D6619e6895Df95A56e2164C7596Cd09B1E70)
 */
export function useOrbRendererMaxStops<
  TFunctionName extends 'MAX_STOPS',
  TSelectData = ReadContractResult<typeof orbRendererABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof orbRendererABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof orbRendererAddress } = {} as any,
) {
  return useContractRead({
    abi: orbRendererABI,
    address: orbRendererAddress[5],
    functionName: 'MAX_STOPS',
    ...config,
  } as UseContractReadConfig<typeof orbRendererABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link orbRendererABI}__ and `functionName` set to `"attributes"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xB467D6619e6895Df95A56e2164C7596Cd09B1E70)
 */
export function useOrbRendererAttributes<
  TFunctionName extends 'attributes',
  TSelectData = ReadContractResult<typeof orbRendererABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof orbRendererABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof orbRendererAddress } = {} as any,
) {
  return useContractRead({
    abi: orbRendererABI,
    address: orbRendererAddress[5],
    functionName: 'attributes',
    ...config,
  } as UseContractReadConfig<typeof orbRendererABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link orbRendererABI}__ and `functionName` set to `"ipfsHashBytes"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xB467D6619e6895Df95A56e2164C7596Cd09B1E70)
 */
export function useOrbRendererIpfsHashBytes<
  TFunctionName extends 'ipfsHashBytes',
  TSelectData = ReadContractResult<typeof orbRendererABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof orbRendererABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof orbRendererAddress } = {} as any,
) {
  return useContractRead({
    abi: orbRendererABI,
    address: orbRendererAddress[5],
    functionName: 'ipfsHashBytes',
    ...config,
  } as UseContractReadConfig<typeof orbRendererABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link orbRendererABI}__ and `functionName` set to `"layers"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xB467D6619e6895Df95A56e2164C7596Cd09B1E70)
 */
export function useOrbRendererLayers<
  TFunctionName extends 'layers',
  TSelectData = ReadContractResult<typeof orbRendererABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof orbRendererABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof orbRendererAddress } = {} as any,
) {
  return useContractRead({
    abi: orbRendererABI,
    address: orbRendererAddress[5],
    functionName: 'layers',
    ...config,
  } as UseContractReadConfig<typeof orbRendererABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link orbRendererABI}__ and `functionName` set to `"svg"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xB467D6619e6895Df95A56e2164C7596Cd09B1E70)
 */
export function useOrbRendererSvg<
  TFunctionName extends 'svg',
  TSelectData = ReadContractResult<typeof orbRendererABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof orbRendererABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof orbRendererAddress } = {} as any,
) {
  return useContractRead({
    abi: orbRendererABI,
    address: orbRendererAddress[5],
    functionName: 'svg',
    ...config,
  } as UseContractReadConfig<typeof orbRendererABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link orbRendererABI}__ and `functionName` set to `"uri"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xB467D6619e6895Df95A56e2164C7596Cd09B1E70)
 */
export function useOrbRendererUri<
  TFunctionName extends 'uri',
  TSelectData = ReadContractResult<typeof orbRendererABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof orbRendererABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof orbRendererAddress } = {} as any,
) {
  return useContractRead({
    abi: orbRendererABI,
    address: orbRendererAddress[5],
    functionName: 'uri',
    ...config,
  } as UseContractReadConfig<typeof orbRendererABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link orbRendererABI}__ and `functionName` set to `"uriIPFS"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xB467D6619e6895Df95A56e2164C7596Cd09B1E70)
 */
export function useOrbRendererUriIpfs<
  TFunctionName extends 'uriIPFS',
  TSelectData = ReadContractResult<typeof orbRendererABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof orbRendererABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof orbRendererAddress } = {} as any,
) {
  return useContractRead({
    abi: orbRendererABI,
    address: orbRendererAddress[5],
    functionName: 'uriIPFS',
    ...config,
  } as UseContractReadConfig<typeof orbRendererABI, TFunctionName, TSelectData>)
}
